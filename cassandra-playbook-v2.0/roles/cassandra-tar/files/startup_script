#!/bin/bash
#
### Description: Cassandra wrapper startup/shutdown script (can be launched either as cassandra or root user)

CASSANDRA_HOME=/opt/apache-cassandra-4.0.14
CASSANDRA_NODETOOL=$CASSANDRA_HOME/bin/nodetool
CASSANDRA_CONF=$CASSANDRA_HOME/conf
PID=/var/run/cassandra/cassandra.pid

# Export JAVA_HOME, if set.
#export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64/jre/
#export PATH=$JAVA_HOME/bin:$PATH

start () {

  # Check if Cassandra is already running

   if [ -f "$PID" ] && pgrep -f "Dcassandra-pidfile=$PID" > /dev/null; then
    echo "Cassandra is already running, PID: $(cat $PID)"

   else
      # Only start Cassandra if it's not already running

   if [ `whoami` == "root" ]; then
       $CASSANDRA_HOME/bin/cassandra -R -p $PID 2>&1 >/dev/null
   elif [ `whoami` == "cassandra" ]; then
       $CASSANDRA_HOME/bin/cassandra -p $PID 2>&1 >/dev/null
   else
       echo "$0: must be executed as root or cassandra" 1>&2
   fi

   fi
   check_status

}

stop () {
   ### Check if Cassandra PID exists and kill it
   if [ `pgrep -f "Dcassandra-pidfile=$PID"` ]; then
       $CASSANDRA_NODETOOL disablegossip
       $CASSANDRA_NODETOOL disablebinary
       $CASSANDRA_NODETOOL drain
       pkill -f "Dcassandra-pidfile=$PID"
       sleep 1
       check_status
   else
       echo "Cassandra is Not Running"
   fi
}

check_status () {
   status
   res=$?
   if [ $res == 1 ]; then
       echo "Status OK. Cassandra is Running, PID: `cat $PID`."
   else
       echo "Cassandra is Stopped."
   fi
}

status () {
   ### Get the Cassandra PID
   pid=`pgrep -f "Dcassandra-pidfile=$PID"`
   if [ "$pid" != "" ]; then
       echo $pid > $PID
       chown root:root $PID
       return 1
   else
       return 0
   fi
}

case "$1" in
 start)
   start
   ;;
 stop)
   stop
   ;;
 status)
   check_status
   ;;
 *)
   echo $"Usage: $0 {start|stop|status}"
   exit 1
esac

exit $?
